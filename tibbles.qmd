---
title: "Tibbles"
format: html
editor: visual
---

# Tibbles (Chap.10)

```{r}
#| label: setup
library(tidyverse)
```

Make tibble from dataframe:\
my_tibble \<- as_tibble(my_dataframe)

Make dataframe from tibble:\
my_dataframe \<- as.data.frame(my_Ttbble)

A tibble will never automatically change character vector to factor when you create it.
When you create dataframes this might happen and it can be pain.

## Parts of a tibble

Pick part of tibble (i.e. variable) with \[\[ or \$.

-   \[\[ can pick position or by name. Remember to put name i quotes, i.e \[\["var1"\]\] or \[\[c("vvar1", "var10"\]\]
-   \$ can only pick by name, i.e \$var.1

If used in a pipe they must be perceded by a dot, i.e. .\[\["var1"\]\] or .\$var1.

## Creating a tibble

```{r}
tib <- tibble(
  x = 1:5,
  y = seq(from = 2.5, by = 0.12, length.out = 5),
  z = x + y^0.5,
  # What does the next one do?  
  # follows a variable (y) and makes a sequence (LETTERS)
  d = LETTERS[seq_along(y) + 10]
)
```

```{r}
tib
```

## R rule: variable names can\`t start with a number

The following will not work:

```{r}
df <- data.frame(
  2002 = 23.22,
  2003 = 12.02,
  2004 = 27.61
)
```

Adding a "x" to the variables will work:

```{r}
df_1 <- data.frame(
  x2002 = 23.22,
  x2003 = 12.02,
  x2004 = 27.61
)
df_1
```

The following will also work:

Note the automatic change of variable names

```{r}
df_2 <- data.frame(
  `2002` = 23.22,
  `2003` = 12.02,
  `2004` = 27.61
)
df_2
```

## Tibble and variable names that start with number

```{r}
tib_1 <- tibble(
  `2002` = 23.22,
  `2003` = 12.02,
  `2004` = 27.61
)
tib_1
```

Try to avoid such variable names, they only create problems.

## Differences between Dataframes and Tibbles

-   Tibbles never changes type of input, ex. character/string to factor variable.
-   Tibbles never changes variable names.
-   Tibbles never creates row names.

## Printing to console large tibbles

class() shows which type of dataset.

```{r}
class(mtcars)
```

Changing from dataframe to tibble

```{r}
as_tibble(mtcars)
```

Row numbers are dropped, when changing to tibble.
This can be fixed by:

```{r}
mtcars_tib <- as_tibble(mtcars, rownames = "Model")
```

```{r}
View(mtcars_tib)
```

## Picking values from tibble in a pipe

```{r}
names(mtcars)
```

```{r}
mtcars %>%
  .$cyl %>% 
  table()
```

```{r}
mtcars %>%
  .[["cyl"]] %>% 
  table()
```

```{r}
mtcars %>%
  .[["cyl"]] %>% 
  class()
```

```{r}
mtcars %>%
  select(cyl) %>% 
  table()
```

```{r}
mtcars %>%
  select(cyl) %>% 
  class()
```

```{r}
mtcars_tib %>%
  select(cyl) %>% 
  class()
```

Using tidyverse to pick values from a tibble, we will get a new tibble back!

## Printing to console large tibbles

Tibbles try to only print as much as will fit in console.

To many variables to fit:

-   Prints top of the variables that fit and list the rest and their type.

We will find type under the variable names.

Tibbles are generally nicer to use than dataframes.

Easy to change from data.frame to tibble and back again.

-   as_tibble() from tibble package
-   as.data.frame() from base package
